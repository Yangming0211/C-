# C-
C程序语言的一些代码记录
后台：test.h
#include<stdio.h>
#include"game.h"
void menu()
{
printf("********************************\n");
printf("*******1.play   0.exit   *******\n");
printf("********************************\n");
}
//游戏的整个实现；
void game()
{
	//游戏继续
	char ret = 'c';
	//数组-存放棋盘信息。
	char borad[ROW][COL] = { 0 };
	//初始化棋盘。
	InitBoard(borad, ROW, COL);
	//打印棋盘
	DisPlayBoard(borad, ROW, COL);
	while (1)
	{
		//玩家下棋
		PlayMove(borad, ROW, COL);
		DisPlayBoard(borad, ROW, COL);
		//玩家赢
		ret = IsWin(borad, ROW, COL);
		if (ret != 'c')
		{
			break;
		}
		//电脑下棋
		ComputerMove(borad, ROW, COL);
		DisPlayBoard(borad, ROW, COL);
		//电脑赢
		ret = IsWin(borad, ROW, COL);
		if (ret != 'C')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢\n");
	}
	else if (ret == '#')
	{
		printf("电脑赢\n");
	}
	else
	{
		printf("平局\n");
	}
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do 
	{
		menu();
		printf("请选择：");
			scanf_s("%d", &input);
		switch(input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("结束游戏\n");
			break;
		default:
			printf("选择错误，请重新选择!\n");
			break;
		}
	} while(input);
}
int main()
{
	test();
	return 0;
}





声明：game.h
#define ROW 3
#define COL 3
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
//函数声明。
void InitBoard(char board[ROW][COL], int row, int col);
void DisPlayBoard(char borad[ROW][COL], int row, int col);
void PlayMove(char borad[ROW][COL], int row, int col);
void ComputerMove(char borad[ROW][COL], int row, int col);


char IsWin(char borad[ROW][COL], int row, int col);





主函数区域：game.c
#include"game.h"
void InitBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}
void DisPlayBoard(char borad[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		//1打印一行的数据。
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", borad[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		//2打印分割行
		if(i < col - 1)
		{ 
			for(j = 0; j < col ; j++)
			{
				printf("---");
				if (j < col - 1)
				{
					printf("|");
				}
			}
		printf("\n");
		}
	}
}
void PlayMove(char borad[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走： \n");
	while (1)
	{
		printf("请输入玩家要下的坐标：> \n");
		scanf_s("%d%d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (borad[x - 1][y - 1] == ' ')
			{
				borad[x - 1][y - 1] = '*'; 
				break;
			}
			else
			{
				printf("该坐标被占用 \n");
			}
		}
		else
		{
			printf("非法坐标，请重新输入： \n");
		}
	}
}
void ComputerMove(char borad[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑下棋：> \n");
	while (1)
	{
		x = rand() & row;
		y = rand() & col;
		if (borad[x][y] == ' ')
		{
			borad[x][y] = '#';
			break;
		}
	}
}
//返回1表示棋盘满了，返回0，棋盘没满
int IsFull(char borad[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (borad[i][j] == ' ')
			{
				return 0;
			}
		}
	}
	return 1;
}
char IsWin(char borad[ROW][COL], int row, int col)
{
	int i = 0;
	//横三行
	for (i = 0; i < row; i++)
	{
		if (borad[0][i] == borad[1][i] && borad[1][i] == borad[2][i] && borad[1][i] != ' ')
		{
			return borad[i][1];
		}
	}
	//列三行
	for (i = 0; i < col; i++)
	{
		if (borad[i][0] == borad[i][1] && borad[i][1] == borad[i][2] && borad[i][1] != ' ')
		{
			return borad[1][i];
		}
	}
	//两个对角线
	if (borad[0][0] == borad[1][1] && borad[1][1] == borad[2][2] && borad[1][1] != ' ')
		return borad[1][1];
	if (borad[0][2] == borad[1][1] && borad[1][1] == borad[2][0] && borad[1][1] != ' ')
		return borad[1][1];

	if (1 == IsFull(borad, ROW, COL));
	{
		return 'Q';
	}
	return 'C';
}
